-> How TLS/SSL work?
--------------------------------------------- NOTE -----------------------------------------
-> SSL Call flow: 
   Browser                                                     Server
   -----------------------> hit youtube.com --------------------------->
   <---------------- Server send public certificate and CA info <----------------------
   --------------> browser has public key about CA.. and verify from CA if SERVER is the one what it is claiming to be. 
                  then send request to server with secret key generated by browser encrypted by public key shared by 
				  Server.-------------->
   ------------- Above all comunication happened is in Assymetric mode ---------
   <-------------- now all the communication between client and server happensing using that ssh key and it is symmetric ---------->
------------------------------------ NOTE ---------------------
-> SSL uses a technique called public-key cryptography. It has following three impt component:
   1. public keys: used by client to encrypt data and it is part of certificate
   2. Private Keys: used by server to decrypt data.
   3. Certificate: install at client by the server.
-> detail information about Certificate:
   - A certificate verifies that an entity is the owner of a particular public key.
   - Certificates that follow the X.509 standard contain a data section and a signature section. The data section 
     includes such information as:
	 1. The Distinguished Name of the entity that owns the public key
     2. The Distinguished Name of the entity that issued the certificate
     3. The period of time during which the certificate is valid
     4. The public key itself
--------------------------------- different algorithm encryption method ------------------------------------
-> Asymmetric encryption algorithm example:
   RSA, DHEC
-> Symmetric encryption algorithm example:
   AES
-> One way encryption example: SHA, 


-----------------------------------
Q) HTTPS uses Asymmetric or Symmetric encryption?
Ans: The best answer is that it does both.
  - TLS uses asymmetric encryption to first establish identity of one or both parties.
  - Secondly, it uses asymmetric encryption to exchange a key to a symmetric cipher. 
  - So asymmetric is only used during the initial setup of communication.
  - Symmetric encryption which is used through the rest is faster and more efficient with large amounts of data transfer. The keys are smaller which is 
    generally why it's faster, but it's algorithm is also easier to process.
  - Link: https://www.ibm.com/support/knowledgecenter/SSFKSJ_7.1.0/com.ibm.mq.doc/sy10660_.htm
Q) How long does an HTTPS symmetric key last?
Ans: So what occurs (especially in a Web context) is the following:
   - The symmetric keys for a connection remain unchanged until the end of that connection.
   - A connection lives as long as client and server allow it; in a Web context, the server will normally close connections which have gone inactive for more than one or two minutes.
Q) how to make our few api's secure and while few support both secure and non secure?
Ans: by default our api provide both acess http and https. we just have to use corresponding port:
   secure connection: https://localhost:8443/myapp/api/secureapi
   non-secure connection: http://localhost:8080/myapp/api/nosecureapi
   - to make mandatory to access the api through secure connection: 
   - add below lines in web.xml: 
     <security-constraint>
		<!--  it will be called by https only-->
		<!-- if we are calling using http, automatically redirect to https connection -->
      <web-resource-collection>
        <web-resource-name>HTTPSOnly</web-resource-name>
        <url-pattern>/api/secureapi</url-pattern>
      </web-resource-collection>
      <user-data-constraint>
        <transport-guarantee>CONFIDENTIAL</transport-guarantee>
      </user-data-constraint>
    </security-constraint>
   - to make the api optional, add below line the web.xml:
    <security-constraint>
     <!--  it will be called by http and https as well-->
	 <!-- for https we have to enter different port -->
        <web-resource-collection>
            <web-resource-name>HTTPSOrHTTP</web-resource-name>
            <url-pattern>/api/notsecureapi</url-pattern>
          <!--   <url-pattern>/img/*</url-pattern>
            <url-pattern>/css/*</url-pattern> -->
        </web-resource-collection>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>
NOTE: as we have not added/integrate certificate to our web server(wildfly), even though we are accessing our application using https, 
      Browser will mention "Not secure" besides(starting of https) URL in chrome.
	- updating the web.xml does not gurantee connection to secure. but it make sure all that URL is acessible using https only. 
	  Now this is job of web server(wildfly) to make the connection secure.
Q) How we integrate certificate in our application?
              OR
   How to make our application HTTPS supported?
Ans: The whole operation of integration is divided in following steps:
   Step 1:  get the following files: 
     1. Certificate file: contain “ -----BEGIN CERTIFICATE -----” and “-----END CERTIFICATE -----” statements.
	                    - the PEM format is the most common format .
						- The PEM certificates usually have extensions such as .pem, .crt, .cer, and .key.
						- SSL certificates, root an intermediate CA certificates, and private keys can all be put into the PEM format.
	 2. private key file: contain " -----BEGIN PRIVATE KEY-----" and "-----END PRIVATE KEY-----" statements.
	               - This is a type of key that is used in asymmetric cryptography.
	               - It is usually protected with a password because of its sensitivity.
				   - It can also be used to sign a digital signature.
	 3 key store file: The Java KeyStore is a database that can contain keys.
				   - The KeyStore as a whole can be protected with a password, and each key entry in the KeyStore can 
				     be protected with its own password.
				   - A KeyStore can hold the following types of keys:
				    1. Private key: used in asymmetric encryption.
					2. public key and Certificate : used in asymmetric encryption.
					               - A public key can have an associated certificate.
                                   - A certificate is a document that verifies the identity of the person, organization 
                                     or device claiming to own the public key.
                                   - A certificate is typically digitally signed by the	verifying party as proof
					3. Secret key: Secret keys are used in symmetric encryption.
	    NOTE:  A few different types of Keystore files for Java are JKS, JCEKS, PKCS#12, PKCS#11, and DKS. 
   Step 2: Copy all three files to the Wildfly configuration directory (${WILDFLY_HOME}/standalone/configuration). 
   Step 3: Once the Keystore file is created, we now need to configure the Wildfly server for SSL/HTTPS.
         - While in the Wildfly configuration directory, open the standalone.xml file and make the following changes.
         - Add a new <security-realm> element by the name “UndertowRealm” under the <security-realms> element. Specify the Keystore file path along 
           with the name, parent directory path, and password as shown below:
 		                 <security-realm name="UndertowRealm">
						  <server-identities>
							 <ssl>
							   <keystore path="wildfly-pkcs12.pfx" relative-to="jboss.server.config.dir" keystore-password="<your-password>" />
							 </ssl>
						   </server-identities>
						 </security-realm>
	      - Realtime example:
		              <security-realm name="SSLSEERealm">
						<server-identities>
							<ssl>
								<keystore path="see.keystore" relative-to="jboss.server.config.dir" keystore-password="changeit" alias="vbox11"/>
							</ssl>
						</server-identities>
					</security-realm>
		 NOTE: Its value isjboss.server.config.dir which is a property placeholder for the Wildfly configuration directory and translates to 
		       ${WILDFLY_HOME}/wildfly/standalone/configuration/.
    Q) what is difference between standalone.xml, standalonefull.xml and standalone-ha.xml?
   Step 4: Now locate the configuration for the undertow subsystem in your standalone.xml and make changes to the <https-listener> element as shown 
           below.
					   <server name="default-server">
						<http-listener name="default" socket-binding="http" redirect-socket="https" enable-http2="true"/>
						<https-listener name="https" socket-binding="https" security-realm="UndertowRealm" enable-http2="true"/>
						<host name="default-host" alias="localhost">
						  <location name="/" handler="welcome-content"/>
						  <http-invoker security-realm="ApplicationRealm"/>
						</host>
					   </server>
		  - Realtime example:
		                <server name="default-server">
							<ajp-listener name="ajp" socket-binding="ajp"/>
							<http-listener name="default" socket-binding="http"/>
							<https-listener name="https" socket-binding="https" security-realm="SSLSEERealm"/>
							<host name="default-host" alias="localhost"/>
						</server>
   Step 5: Save the standalone.xml and restart the Wildfly server.  
   Step 6: Access the https url:
    - Now go to https://<your-ssl-registered-domain>:8443/ and you can access the Wildlfy server.
	- In addition to this, you will also notice a “ lock” icon on the right side of your browser’s address bar (if you are using the IE browser) as 
	  shown below. 
	- This means that the browser has validated your SSL certificate and its associated certificate chain and the SSL handshake was successful.
	- The communication between your browser and the server is now HTTP secured.

NOTE: Wildfly by default listens for HTTPS traffic on TCP port 8443. However, the standard TCP port used by HTTPS connections is 443. We can use the iptables utility to configure the Linux kernel firewall and redirect HTTPS traffic on port 443 to port 8443 that is used by Wildfly for HTTPS communication.
     $ sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443
	 $ sudo iptables -t nat -A OUTPUT -p tcp --dport 443 -o lo -j REDIRECT --to-port 8443
	 $ sudo service iptables save
--------------------------------- Testing all above steps: --------------------------




---------------------- Trial ------------
Q) what is difference between below two command: 
  #keytool -genkey -alias mytrustCA -keyalg RSA -keystore keystore.jks -keysize 1024
                       and
  #Keytool -genkey -alias server-alias -keyalg RSA -keypass changeit -storepass changeit -keystore keystore.jks     // i have used it
  ----------
- Step: create a Certificate which is stored in keystore.jks file.
  C:\Users\raviro\Desktop\https_certificate>"C:\Program Files\Java\jdk1.8.0_161\bin\keytool" -genkey -alias server-alias -keyalg RSA -keypass changeit -storepass changeit -keystore keystore.jks
	What is your first and last name?
	  [Unknown]:  localhost
	What is the name of your organizational unit?
	  [Unknown]:  myhttpslearn
	What is the name of your organization?
	  [Unknown]:  myhttpslearn
	What is the name of your City or Locality?
	  [Unknown]:  bangalore
	What is the name of your State or Province?
	  [Unknown]:  karnataka
	What is the two-letter country code for this unit?
	  [Unknown]:  in
	Is CN=localhost, OU=myhttpslearn, O=myhttpslearn, L=bangalore, ST=karnataka, C=in correct?
	  [no]:  yes
   - above command will create a certificate and store it in keystore file keystore.jks file. and we will have only keystore file
   - warning: The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 which is an industry standard format using "keytool -importkeystore -srckeystore keystore.jks -destkeystore keystore.jks -deststoretype pkcs12".
- Step: migrate the certificate format to industry standard which is PKCS12.
   #"C:\Program Files\Java\jdk1.8.0_161\bin\keytool" -importkeystore -srckeystore keystore.jks -destkeystore keystore.jks -deststoretype pkcs12
   - above command will create a backup for old keystore file and create a keystore file with same name with recomended format PKCS12.
- Step: extract the private key in a file(private_key.pem) from the keystore file:
   #C:\Users\raviro\Desktop\https_certificate>"C:\OpenSSL-Win64\bin\openssl" pkcs12 -in keystore.jks -nodes -nocerts -out private_key.pem
	WARNING: can't open config file: /usr/local/ssl/openssl.cnf
	Enter Import Password:changeit
	MAC verified OK
  NOTE: we have to installe openssl exe file to run this command.
- Step: extract public key(certificate) from keystore.jks to a file public_certificate.crt :
   #C:\Users\raviro\Desktop\https_certificate>"C:\OpenSSL-Win64\bin\openssl" pkcs12 -in keystore.jks -nokeys -out public_certificate.crt
	WARNING: can't open config file: /usr/local/ssl/openssl.cnf
	Enter Import Password:changeit
	MAC verified OK
  Q) i tried to export to file with extension public_certificate.pem. i created the empty file. why ???????????????????????
- Step: copy keystore.jks(keystore file), private_key.pem(private key file), and public_certificate.crt(public key) to 
  "\wildfly-10.1.0.Final\standalone\configuration\". 
- Step: update the two section of standalone.xml file as explained above. restart the wildfly server. 
       now we can see, our new certificate is available at browswer. 
	- for more info please check link: https://stackoverflow.com/questions/61716470/how-to-verify-wildfly-web-server-is-using-added-keystore-file-for-https-connecti
- Step: but still it shows "Not Secure" in the browser as it is self-signed certificate. but there is way to add this 
     certificate to trustStore of chrome. and restart the chorome. this time you should see the closed padlock and "Secure" annotation to the left of the URL.
	for more info, use link:
	https://www.pico.net/kb/how-do-you-get-chrome-to-accept-a-self-signed-certificate
NOTE: actually, all three files doesn't needed by wildfly server. it just need keystore file which has certificate and 
    private key as well. but we can extract them to file to use it for othere purpose if needed.


------------ 
- Add the certificate to the trust store file:
  #keytool -import -v -trustcacerts -alias server-alias -file public_certificate.crt -keystore cacerts.jks -keypass changeit -storepass changeit
   
Q) assume we are having a java application rather than browser as a client. now our application want to access any 
   server using https. now obviously our application will not have certificate and all. then how our application will 
   access the https url.
                                      OR
   This is real time prblm: normally we use http to download maven dependecy. now suddenly in my project, the central 
   repository is only accesible through https. i have updated urls in the settings.xml from http to https.
   But now i can access the central repo from browser but while running maven build in my eclipse getting below error:
   ERROR:
      sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
Solution: 
   prblm here is public certificate is not store in the truststore file of JVM. So it can't communicate with the server 
   using https. 
   - open the central repo in browser(https://apgpro.in.rdlabs.hpecorp.net/nexus/content/groups/public/). and follow 
     below steps to export the certificate in the file:
     chrome -> click on site icon left to address in address bar, select "Certificate" -> "Details" -> "Copy to File..." -> next -> save in format "Der-encoded binary, single certificate" -> exported file "hpemavenrepocert.cer"
   - Now we have file with keystore and we have to add it to our JVM. Determine location of cacerts files, eg.  
     C:\Program Files\Java\jdk1.8.0_161\jre\lib\security\cacerts
   - Next import the hpemavenrepocert.cer file into cacerts using command line:
     - open cmd as Administrator and run below command:
     C:\WINDOWS\system32>"C:\Program Files\Java\jdk1.8.0_161\bin\keytool" -import -alias example -keystore "C:\Program Files\Java\jdk1.8.0_161\jre\lib\security\cacerts" -file "C:\Users\raviro\Desktop\hpemavenrepocert.cer"
    NOTE: You will be asked for password which default is "changeit"
   - restart JVM or eclipse, it will work fine.
  Ref link: https://stackoverflow.com/questions/21076179/pkix-path-building-failed-and-unable-to-find-valid-certification-path-to-requ
Q) what is cacerts file?
Ans: The cacerts file is a collection of trusted certificate authority (CA) certificates.
   - Oracle includes a cacerts file with its SSL support in the Java™ Secure Socket Extension (JSSE) tool kit and JDK.
   - The default password for the cacerts file supplied by Oracle is changeit. 
   - Java uses cacerts to authenticate the servers.
   - location: "C:\Program Files\Java\jdk1.8.0_161\jre\lib\security\cacerts"
Q) how can we access a https rest api from java client.
   



