------- WAR Files and Deployment ----------
-> VVI Link to learn class loading by wildfly: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/development_guide/class_loading_and_modules#add_an_explicit_module_dependency_to_a_deployment

https://www.javacodegeeks.com/2012/09/jboss-as-7-classloading-explained.html
-> war file directory structure:
   #jar tvf shoppingcart.war
        index.html
        purchase.html
        receipt.html
        images/happybunny.gif
        WEB-INF/web.xml
        WEB-INF/classes/com/mycompany/PurchaseServlet.class
        WEB-INF/classes/com/mycompany/ReturnServlet.class
        WEB-INF/lib/thirdparty.jar
-> the name of the WAR becomes, by default, the root path of the web application—in this case, shoppingcart. 
   so base URL: http://localhost:8080/shoppingcart/
-> by default web application classpath: is WEB-INF/classes/ and WEB-INF/lib/

------- class loading by jboss AS > 7
-> link for class loading in wildfly:
   https://docs.jboss.org/author/display/WFLY10/Class+Loading+in+WildFly
   
-> Class loading is considerably different to previous versions of JBoss AS. Class loading is based on the JBoss 
   Modules project. 
-> WildFly's class loading is based on modules that have to define explicit dependencies on other modules.
-> it is possible for a deployment to import classes from another deployment using the other deployments module name, 
   the details of how to add an explicit module dependency are explained below.
-> the details of how to add an explicit module dependency are explained below.
-> Automatic dependencies can be excluded through the use of jboss-deployment-structure.xml.
-> Class loading preference:
   -> In order of highest priority to lowest priority
	System Dependencies - These are dependencies that are added to the module automatically by the container, including the Java EE api's.
	User Dependencies - These are dependencies that are added through jboss-deployment-structure.xml or through the Dependencies: manifest entry.
	Local Resource - Class files packaged up inside the deployment itself, e.g. class files from WEB-INF/classes or WEB-INF/lib of a war.
	Inter deployment dependencies - These are dependencies on other deployments in an ear deployment. This can include classes in an ear's lib directory, or classes defined in other ejb jars. 
-> war class loading:
   -> The war is considered to be a single module, so classes defined in WEB-INF/lib are treated the same as classes in 
      WEB-INF/classes. All classes packaged in the war will be loaded with the same class loader.
	  
   -> cd /var/opt/OC/hpoc-see/wildfly/server/see-5/tmp/vfs/deployment/
-> If the ear-subdeployments-isolated is set to false, then the classes in web.war can access classes belonging to 
   ejb1.jar and ejb2.jar. Similarly, classes from ejb1.jar can access classes from ejb2.jar (and vice-versa).
   NOTE: The ear-subdeployments-isolated element value has no effect on the isolated classloader of the .war file(s). i.e. irrespective of whether this flag is set to true or false, the .war within a .ear will have a isolated classloader and other sub-deployments within that .ear will not be able to access classes from that .war. This is as per spec.
-> If the ear-subdeployments-isolated is set to true then no automatic module dependencies between the sub-deployments are set up. User must manually setup the dependency with Class-Path entries, or by setting up explicit module dependencies.
-> Portability
The Java EE specification says that portable applications should not rely on sub deployments having access to other sub deployments unless an explicit Class-Path entry is set in the MANIFEST.MF. So portable applications should always use Class-Path entry to explicitly state their dependencies.
-> line to be added to generate manifest.mf in pom.xml:
   <build>
   ...
    <plugins>
     <plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-war-plugin</artifactId>
       <configuration>
          <archive>
             <manifestEntries>
                <Dependencies>org.slf4j</Dependencies>
             </manifestEntries>
          </archive>
       </configuration>
     </plugin>
    </plugins>
  </build>
-> Class Path Entries: It is also possible to add module dependencies on other modules inside the deployment using the 
                       Class-Path manifest entry.
-> Global Modules: It is also possible to set up global modules, that are accessible to all deployments. This is done 
                 by modifying the configuration file (standalone/domain.xml).
		standalone.xml/domain.xml
		<subsystem xmlns="urn:jboss:domain:ee:1.0" >            
		  <global-modules>
			<module name="org.javassist" slot="main" />            
		  </global-modules> 
		</subsystem>
-> JBoss Deployment Structure File: jboss-deployment-structure.xml is a JBoss specific deployment descriptor that can be used to control class loading in a fine grained manner. It should be placed in the top level deployment, in META-INF (or WEB-INF for web deployments). 
  -> It can do the following:
	Prevent automatic dependencies from being added
	Add additional dependencies
	Define additional modules 
	Change an EAR deployments isolated class loading behavior
	Add additional resource roots to a module
	
-> Modules and Class Loading in Enterprise Archives: // EAR
   -> Enterprise Archives (EAR) are not loaded as a single module like JAR or WAR deployments. 
      They are loaded as multiple unique modules.
   -> The following rules determine what modules exist in an EAR:
      1. The contents of the lib/ directory in the root of the EAR archive is a module. This is called the parent module.
      2. Each WAR and EJB JAR subdeployment is a module. These modules have the same behavior as any other module as 
	     well as implicit dependencies on the parent module.
      3. Subdeployments have implicit dependencies on the parent module and any other non-WAR subdeployments.
	  4. Any subdeployment can be configured with explicit dependencies on another subdeployment as would be done for any other module.
  -> Each subdeployment in an Enterprise Archive (EAR) is a dynamic module with its own class loader. By default, a subdeployment can access the resources of other subdeployments.
  -> If a subdeployment is not to be allowed to access the resources of other subdeployments, strict subdeployment isolation can be enabled.     ??????????? How
  -> Enable Subdeployment Class Loader Isolation Within a EAR  ??????????? 
     -> add below tag in jboss-deployment-structure.xml of the ear module:
	    <ear-subdeployments-isolated>true</ear-subdeployments-isolated>   // true or false as needed
  -> what is meaning of statement: ???????????
     Subdeployment class loader isolation is now enabled/disabled for this EAR deployment. 
-> Configuring Session Sharing between Subdeployments in Enterprise Archives
  -> JBoss EAP provides the ability to configure enterprise archives (EARs) to share sessions between WAR module subdeployments contained in the EAR. This functionality is disabled by default and must be explicitly enabled in the META-INF/jboss-all.xml file in the EAR.
  -> To enable session sharing between WARs within an EAR, you need to declare a shared-session-config element in the META-INF/jboss-all.xml of the EAR:
  
-> jboss load multiple application in one JVM. Explanation:
   -> 
  





   
   
   
   
---------- Q&A -------------------
Q) How to change the default root path of the web application different than the war file name in jboss? 
Q) why the name WEB-INF and other few info?
Ans: because it contains all the web deployment information.
  -> This directory is protected by the web server, and its contents are not visible to outside users of the 
     application, even if you add WEB-INF to the base URL. 
  -> Your application classes can load additional files from this area using getResource() on the servlet context.
Q) Explain the below statement:
   It’s also possible to install JAR files directly in the servlet container to make them available to all web apps running on that server.
							 OR
   Servlet API requires that each server provide a directory for these extension JARs and that the classes there will be loaded by a single classloader and made visible to the web application.
Ans: Hint: This is often done for common libraries that will be used by many web apps.
Q) Please find the below scenarios:
	if we deploy any project in any server(here it wildfly). then it will go to the folder
	  wildfly-10.1.0.Final\standalone\deployments\
	so if we are deploying two project war file i.e. A.war and B.war so, in the same folder both war file will be deployed 
	and will be completely isolated from one another:
	  wildfly-10.1.0.Final\standalone\deployments\A.war
	  wildfly-10.1.0.Final\standalone\deployments\B.war
	Now there is one jar file(common.jar) which is being used by both the jar file. one solution is that jar will be in both war file and work fine. But my question is what if we don't want to keep the jar file in both the war file instead keep it in the deployment folder itself as below:
	  wildfly-10.1.0.Final\standalone\deployments\A.war
	  wildfly-10.1.0.Final\standalone\deployments\B.war
	  wildfly-10.1.0.Final\standalone\deployments\common.jar
	So, Here question is, can A.war and B.war can access the common.jar file. if not, how can we make it possible.

	Note: it just question came in mind so it might not be a good scenarios. 
Solution:
   -> Ref link:  https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/development_guide/class_loading_and_modules
   -> Wildfly server works based on module structure. So whatever application we deployed on it, it create a isolated 
      module with separate class loader.
    so, for our scenarios, There would be three deployment module in the wildfly with name:
    1. deployment.A.war 2. deployment.B.war 3. deployment.common.jar
    -> As, we know, whichever module of Wildfly we want to associate with our deployed application, we can include or exclude it using jboss-deployment-structure.xml file in this project.
    -> create a jboss-deployment-structure.xml in web-inf of A.war and B.war with the following content:
		  <?xml version="1.0" encoding="UTF-8"?>
		  <jboss-deployment-structure xmlns="urn:jboss:deployment-structure:1.2">
		  <deployment>
			  <dependencies>
				<module name="deployment.common.jar" />
			  </dependencies>
		  </deployment>
		  </jboss-deployment-structure>
  Note: 
    -> for the dynamic module(application we deployed to the server), the name of the module will be always prefix with "deployment." just like:if my app name is "abc.war" module name will be "deployment.abc.war".
    -> we also have to make sure, common.jar is not available to A.war and B.war and also it should be available for 
	   proper build of project A and B. So, we add them as dependency of A and B with scope "provider". This make sure, common.jar will not be packaged inside of both app war file(in A.war and B.war).
    -> advantage of this approach is, A.war and B.war can communicate with each other using common.jar.// still have to verify it.
	   - still have to verify this steps as, classloader of A.war module, B.war module and common.jar module is different. 
	     So when A.war will use the class of common.jar, will it load that class using classloader of A.war or it will use the 
		 loaded class by the common.jar classloader and same situation goes in case of B.war also.
	   - if A.war and B.war will use class from common.jar which is loaded by common.jar itself then it will work fine(means) both
	     can communicate using the class of common.jar else it might not be possible.
--------------- Another approach also used in company ---------------
-> create a separate wildfly level module for common.jar and put it under wildfly-10.1.0.Final\modules\system\layers\base and 
   same module we can refer it in our application(A.war or B.war) using jboss-deployment-structure.xml file.
Note: this case will be little bit different from earlier one. there we were refering the deployed module. while in this case, we
   we loading the module in our application. So obviously for different application, there would be different classloader for loading this module.
-> create a Maven Module(it create only module.xml file). and then at the time of deployment first we put the module.xml 
   and corresponding common.jar file in the modules/* location of wildfly server.
   -> create a maven module(web-quick* maven type).
   -> update the pom.xml:
      - package type: <packaging>pom</packaging>
	  - and provide the below configuration to create module.xml
	  <build>
        <plugins>
            <plugin>
                <groupId>com.hp.opencall.maven.plugins</groupId>
                <artifactId>wildfly-module-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <modulesDir>true</modulesDir>
                    <modules>
                        <module>   //module location: wildfly-10.1.0.Final\modules\system\layers\base\com\learn\munsiji\common-api
                            <name>com.learn.munsiji.common-api</name>    // location where we will put module.xml file and 
                            <resources>                                  // two jar: common.model.jar and common.util.jar
                                <resource>
                                    <groupId>com.learn.munsiji.common-model</groupId>
                                    <artifactId>common-model</artifactId>
                                    <finalname>common-model</finalname>
                                    <version>1.0.SNAPSHOT</version>
                                    <scope>provided</scope>
                                </resource>
                                <resource>
                                    <groupId>com.learn.munsiji.common-util</groupId>
                                    <artifactId>common-util</artifactId>
                                    <finalname>common-util</finalname>
                                    <version>1.0.SNAPSHOT</version>
                                    <scope>provided</scope>
                                </resource>
                            </resources>
                            <dependencies> // there is possiblity where, these two jar migh depends on other wildfly module.
                                 <module>  // so we can refer them here.. else will get module not found exception.
					        		<name>org.apache.util.log4j</name>
				         		 </module>
                            </dependencies>
                        </module>
                    </modules>
                </configuration>
            </plugin>
        </plugins>
    </build>
Q) unable to access deployed application on the jboss server from different machine.
                        OR
	i'm not able to access my jboss server using my ip address like http://192.168.55.147:8080/... but it is working fine when i use with the name localhost like http://localhost:8080.
  hint: https://docs.jboss.org/author/display/WFLY10/Interfaces+and+ports
Ans: 
   command to turn off/on firewall in windows 10:
   #netsh advfirewall show allprofiles
   #netsh advfirewall set allprofiles state off
   #netsh advfirewall set allprofiles state on

Q) How to put an external file in the classpath?
Ans: The secret to getting external files into your application's classpath is to make use of the module classloader.
	
Q) How to create new module in wildfly and what is the use of it?
Q) What is the meaning of the below statement:
   JBoss EAP uses a modular class loading system for controlling the class paths of deployed applications. 
Q) How JBos EAP achieve class loader isolation of each module of the deployed application.
Q) use of module.xml: https://dzone.com/articles/hello-world-with-jboss-modules

  

